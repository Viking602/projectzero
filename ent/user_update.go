// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"projectzero/ent/predicate"
	"projectzero/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserName sets the "user_name" field.
func (uu *UserUpdate) SetUserName(s string) *UserUpdate {
	uu.mutation.SetUserName(s)
	return uu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserName(s *string) *UserUpdate {
	if s != nil {
		uu.SetUserName(*s)
	}
	return uu
}

// SetNickName sets the "nick_name" field.
func (uu *UserUpdate) SetNickName(s string) *UserUpdate {
	uu.mutation.SetNickName(s)
	return uu
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickName(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickName(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetUserType sets the "user_type" field.
func (uu *UserUpdate) SetUserType(i int) *UserUpdate {
	uu.mutation.ResetUserType()
	uu.mutation.SetUserType(i)
	return uu
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserType(i *int) *UserUpdate {
	if i != nil {
		uu.SetUserType(*i)
	}
	return uu
}

// AddUserType adds i to the "user_type" field.
func (uu *UserUpdate) AddUserType(i int) *UserUpdate {
	uu.mutation.AddUserType(i)
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// SetDeleteAt sets the "delete_at" field.
func (uu *UserUpdate) SetDeleteAt(i int64) *UserUpdate {
	uu.mutation.ResetDeleteAt()
	uu.mutation.SetDeleteAt(i)
	return uu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleteAt(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDeleteAt(*i)
	}
	return uu
}

// AddDeleteAt adds i to the "delete_at" field.
func (uu *UserUpdate) AddDeleteAt(i int64) *UserUpdate {
	uu.mutation.AddDeleteAt(i)
	return uu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (uu *UserUpdate) ClearDeleteAt() *UserUpdate {
	uu.mutation.ClearDeleteAt()
	return uu
}

// SetUpdateAt sets the "update_at" field.
func (uu *UserUpdate) SetUpdateAt(i int64) *UserUpdate {
	uu.mutation.ResetUpdateAt()
	uu.mutation.SetUpdateAt(i)
	return uu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdateAt(i *int64) *UserUpdate {
	if i != nil {
		uu.SetUpdateAt(*i)
	}
	return uu
}

// AddUpdateAt adds i to the "update_at" field.
func (uu *UserUpdate) AddUpdateAt(i int64) *UserUpdate {
	uu.mutation.AddUpdateAt(i)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uu.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedUserType(); ok {
		_spec.AddField(user.FieldUserType, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.DeleteAt(); ok {
		_spec.SetField(user.FieldDeleteAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDeleteAt(); ok {
		_spec.AddField(user.FieldDeleteAt, field.TypeInt64, value)
	}
	if uu.mutation.DeleteAtCleared() {
		_spec.ClearField(user.FieldDeleteAt, field.TypeInt64)
	}
	if value, ok := uu.mutation.UpdateAt(); ok {
		_spec.SetField(user.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUpdateAt(); ok {
		_spec.AddField(user.FieldUpdateAt, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserName sets the "user_name" field.
func (uuo *UserUpdateOne) SetUserName(s string) *UserUpdateOne {
	uuo.mutation.SetUserName(s)
	return uuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUserName(*s)
	}
	return uuo
}

// SetNickName sets the "nick_name" field.
func (uuo *UserUpdateOne) SetNickName(s string) *UserUpdateOne {
	uuo.mutation.SetNickName(s)
	return uuo
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickName(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetUserType sets the "user_type" field.
func (uuo *UserUpdateOne) SetUserType(i int) *UserUpdateOne {
	uuo.mutation.ResetUserType()
	uuo.mutation.SetUserType(i)
	return uuo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserType(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUserType(*i)
	}
	return uuo
}

// AddUserType adds i to the "user_type" field.
func (uuo *UserUpdateOne) AddUserType(i int) *UserUpdateOne {
	uuo.mutation.AddUserType(i)
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// SetDeleteAt sets the "delete_at" field.
func (uuo *UserUpdateOne) SetDeleteAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetDeleteAt()
	uuo.mutation.SetDeleteAt(i)
	return uuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleteAt(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDeleteAt(*i)
	}
	return uuo
}

// AddDeleteAt adds i to the "delete_at" field.
func (uuo *UserUpdateOne) AddDeleteAt(i int64) *UserUpdateOne {
	uuo.mutation.AddDeleteAt(i)
	return uuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (uuo *UserUpdateOne) ClearDeleteAt() *UserUpdateOne {
	uuo.mutation.ClearDeleteAt()
	return uuo
}

// SetUpdateAt sets the "update_at" field.
func (uuo *UserUpdateOne) SetUpdateAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdateAt()
	uuo.mutation.SetUpdateAt(i)
	return uuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdateAt(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdateAt(*i)
	}
	return uuo
}

// AddUpdateAt adds i to the "update_at" field.
func (uuo *UserUpdateOne) AddUpdateAt(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdateAt(i)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedUserType(); ok {
		_spec.AddField(user.FieldUserType, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.DeleteAt(); ok {
		_spec.SetField(user.FieldDeleteAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDeleteAt(); ok {
		_spec.AddField(user.FieldDeleteAt, field.TypeInt64, value)
	}
	if uuo.mutation.DeleteAtCleared() {
		_spec.ClearField(user.FieldDeleteAt, field.TypeInt64)
	}
	if value, ok := uuo.mutation.UpdateAt(); ok {
		_spec.SetField(user.FieldUpdateAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUpdateAt(); ok {
		_spec.AddField(user.FieldUpdateAt, field.TypeInt64, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
